{"version":3,"sources":["Tab.esm.js"],"names":["_mySessionStorage","_tablistElement","_tabElements","_tabpanelElements","_selectedTabNo","_tabClickEventListener","_tabKeydownEventListener","_tabpanelKeydownEventListener","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","Tab","HTMLElement","[object Object]","super","sessionStorage","e","console","info","cssString","shadow","attachShadow","mode","innerHTML","undefined","adoptedStyleSheets","cssStyleSheet","CSSStyleSheet","replaceSync","shadowRoot","getElementById","_tabClickEvent","bind","_tabKeydownEvent","_tabpanelKeydownEvent","observedAttributes","assignedNodes","flatten","tablistLabel","setAttribute","forEach","tabElement","index","href","Error","hash","URL","tabpanelElementId","decodeURIComponent","substring","tabpanelElement","document","tabElementId","_getTabElementId","removeAttribute","id","addEventListener","passive","storageKey","initialSelectTabpanelId","getItem","initialSelectTabpanelElement","indexOf","_selectTab","removeEventListener","name","_oldValue","newValue","getAttribute","localName","String","ev","_changeTab","currentTarget","key","preventDefault","length","ctrlKey","focus","tabNo","select","tabIndex","setItem","WeakMap"],"mappings":"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","file":"Tab.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _mySessionStorage, _tablistElement, _tabElements, _tabpanelElements, _selectedTabNo, _tabClickEventListener, _tabKeydownEventListener, _tabpanelKeydownEventListener;\n/**\n * Tab\n *\n * @version 1.5.0\n */\nexport default class Tab extends HTMLElement {\n    constructor() {\n        super();\n        _mySessionStorage.set(this, null);\n        _tablistElement.set(this, void 0);\n        _tabElements.set(this, []);\n        _tabpanelElements.set(this, []);\n        _selectedTabNo.set(this, 0); // 何番目のタブが選択されているか\n        _tabClickEventListener.set(this, void 0);\n        _tabKeydownEventListener.set(this, void 0);\n        _tabpanelKeydownEventListener.set(this, void 0);\n        try {\n            __classPrivateFieldSet(this, _mySessionStorage, sessionStorage);\n        }\n        catch (e) {\n            console.info('Storage access blocked.');\n        }\n        const cssString = `\n\t\t\t:host {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\n\t\t\t.tablist > slot {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: flex-end;\n\t\t\t}\n\n\t\t\t.tabpanels ::slotted([aria-hidden=\"true\"]) {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t`;\n        const shadow = this.attachShadow({ mode: 'open' });\n        shadow.innerHTML = `\n\t\t\t<div id=\"tablist\" class=\"tablist\" role=\"tablist\">\n\t\t\t\t<slot id=\"tab-slot\" name=\"tab\"></slot>\n\t\t\t</div>\n\t\t\t<div class=\"tabpanels\">\n\t\t\t\t<slot id=\"tabpanel-slot\" name=\"tabpanel\"></slot>\n\t\t\t</div>\n\t\t`;\n        if (shadow.adoptedStyleSheets !== undefined) {\n            const cssStyleSheet = new CSSStyleSheet();\n            cssStyleSheet.replaceSync(cssString);\n            shadow.adoptedStyleSheets = [cssStyleSheet];\n        }\n        else {\n            /* adoptedStyleSheets 未対応環境 */\n            shadow.innerHTML += `<style>${cssString}</style>`;\n        }\n        __classPrivateFieldSet(this, _tablistElement, this.shadowRoot?.getElementById('tablist'));\n        __classPrivateFieldSet(this, _tabClickEventListener, this._tabClickEvent.bind(this));\n        __classPrivateFieldSet(this, _tabKeydownEventListener, this._tabKeydownEvent.bind(this));\n        __classPrivateFieldSet(this, _tabpanelKeydownEventListener, this._tabpanelKeydownEvent.bind(this));\n    }\n    static get observedAttributes() {\n        return ['tablist-label', 'storage-key'];\n    }\n    connectedCallback() {\n        __classPrivateFieldSet(this, _tabElements, this.shadowRoot?.getElementById('tab-slot').assignedNodes({ flatten: true }));\n        __classPrivateFieldSet(this, _tabpanelElements, this.shadowRoot?.getElementById('tabpanel-slot').assignedNodes({ flatten: true }));\n        const tablistLabel = this.tablistLabel;\n        if (tablistLabel !== null) {\n            __classPrivateFieldGet(this, _tablistElement).setAttribute('aria-label', tablistLabel);\n        }\n        __classPrivateFieldGet(this, _tabElements).forEach((tabElement, index) => {\n            const href = tabElement.href;\n            if (href === '') {\n                throw new Error('Attribute: `href` is not set.');\n            }\n            const hash = new URL(href).hash;\n            if (hash === '') {\n                throw new Error('Attribute: `href` does not contain hash.');\n            }\n            const tabpanelElementId = decodeURIComponent(hash.substring(1));\n            const tabpanelElement = document.getElementById(tabpanelElementId);\n            if (tabpanelElement === null) {\n                throw new Error(`Element: #${tabpanelElementId} can not found.`);\n            }\n            const tabElementId = this._getTabElementId(index);\n            tabElement.removeAttribute('href');\n            tabElement.id = tabElementId;\n            tabElement.setAttribute('role', 'tab');\n            tabElement.setAttribute('aria-controls', tabpanelElementId);\n            tabpanelElement.setAttribute('role', 'tabpanel');\n            tabpanelElement.setAttribute('aria-labelledby', tabElementId);\n            tabElement.addEventListener('click', __classPrivateFieldGet(this, _tabClickEventListener), { passive: true });\n            tabElement.addEventListener('keydown', __classPrivateFieldGet(this, _tabKeydownEventListener));\n            tabpanelElement.addEventListener('keydown', __classPrivateFieldGet(this, _tabpanelKeydownEventListener));\n        });\n        if (__classPrivateFieldGet(this, _mySessionStorage) !== null) {\n            const storageKey = this.storageKey;\n            if (storageKey !== null) {\n                const initialSelectTabpanelId = __classPrivateFieldGet(this, _mySessionStorage).getItem(storageKey); // 前回選択したタブ ID\n                if (initialSelectTabpanelId !== null) {\n                    const initialSelectTabpanelElement = document.getElementById(initialSelectTabpanelId);\n                    if (initialSelectTabpanelElement === null) {\n                        console.info(`Element: #${initialSelectTabpanelId} can not found.`);\n                    }\n                    else {\n                        __classPrivateFieldSet(this, _selectedTabNo, __classPrivateFieldGet(this, _tabpanelElements).indexOf(initialSelectTabpanelElement));\n                    }\n                }\n            }\n        }\n        this._selectTab(__classPrivateFieldGet(this, _selectedTabNo));\n    }\n    disconnectedCallback() {\n        for (const tabElement of __classPrivateFieldGet(this, _tabElements)) {\n            tabElement.removeEventListener('click', __classPrivateFieldGet(this, _tabClickEventListener));\n            tabElement.removeEventListener('keydown', __classPrivateFieldGet(this, _tabKeydownEventListener));\n        }\n        for (const tabpanelElement of __classPrivateFieldGet(this, _tabpanelElements)) {\n            tabpanelElement.removeEventListener('keydown', __classPrivateFieldGet(this, _tabpanelKeydownEventListener));\n        }\n    }\n    attributeChangedCallback(name, _oldValue, newValue) {\n        switch (name) {\n            case 'tablist-label': {\n                __classPrivateFieldGet(this, _tablistElement).setAttribute('aria-label', newValue);\n                break;\n            }\n            case 'storage-key': {\n                break;\n            }\n        }\n    }\n    get tablistLabel() {\n        return this.getAttribute('tablist-label');\n    }\n    set tablistLabel(value) {\n        if (value === null) {\n            this.removeAttribute('tablist-label');\n            return;\n        }\n        if (typeof value !== 'string') {\n            throw new TypeError(`Only a string value can be specified for the \\`tablist-label\\` attribute of the <${this.localName}> element.`);\n        }\n        this.setAttribute('tablist-label', value);\n    }\n    get storageKey() {\n        return this.getAttribute('storage-key');\n    }\n    set storageKey(value) {\n        if (value === null) {\n            this.removeAttribute('storage-key');\n            return;\n        }\n        if (typeof value !== 'string') {\n            throw new TypeError(`Only a string value can be specified for the \\`storage-key\\` attribute of the <${this.localName}> element.`);\n        }\n        this.setAttribute('storage-key', value);\n    }\n    /**\n     * タブの ID 文字列を取得する\n     *\n     * @param {number} index - 何番目のタブか\n     *\n     * @returns {string} ID 文字列\n     */\n    _getTabElementId(index) {\n        return `tab-${String(index + 1)}`;\n    }\n    /**\n     * タブをクリックしたときの処理\n     *\n     * @param {MouseEvent} ev - Event\n     */\n    _tabClickEvent(ev) {\n        this._changeTab(__classPrivateFieldGet(this, _tabElements).indexOf(ev.currentTarget));\n    }\n    /**\n     * タブをキーボード操作したときの処理\n     *\n     * @param {KeyboardEvent} ev - Event\n     */\n    _tabKeydownEvent(ev) {\n        switch (ev.key) {\n            case 'ArrowLeft':\n            case 'ArrowUp': {\n                ev.preventDefault();\n                this._changeTab(__classPrivateFieldGet(this, _selectedTabNo) < 1 ? __classPrivateFieldGet(this, _tabElements).length - 1 : __classPrivateFieldGet(this, _selectedTabNo) - 1);\n                break;\n            }\n            case 'ArrowRight':\n            case 'ArrowDown': {\n                ev.preventDefault();\n                this._changeTab(__classPrivateFieldGet(this, _selectedTabNo) >= __classPrivateFieldGet(this, _tabElements).length - 1 ? 0 : __classPrivateFieldGet(this, _selectedTabNo) + 1);\n                break;\n            }\n            case 'End': {\n                ev.preventDefault();\n                this._changeTab(__classPrivateFieldGet(this, _tabElements).length - 1);\n                break;\n            }\n            case 'Home': {\n                ev.preventDefault();\n                this._changeTab(0);\n                break;\n            }\n        }\n    }\n    /**\n     * タブパネルをキーボード操作したときの処理\n     *\n     * @param {KeyboardEvent} ev - Event\n     */\n    _tabpanelKeydownEvent(ev) {\n        switch (ev.key) {\n            case 'ArrowLeft':\n            case 'ArrowUp': {\n                if (ev.ctrlKey) {\n                    /* Ctrl キーが同時に押下された場合は、選択中の [role=\"tab\"] な要素にフォーカスを移動する */\n                    ev.preventDefault();\n                    __classPrivateFieldGet(this, _tabElements)[__classPrivateFieldGet(this, _selectedTabNo)].focus();\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * タブを選択する\n     *\n     * @param {number} tabNo - 選択するタブ番号\n     */\n    _selectTab(tabNo) {\n        __classPrivateFieldGet(this, _tabElements).forEach((tabElement, index) => {\n            const select = index === tabNo; // 選択されたタブかどうか\n            tabElement.tabIndex = select ? 0 : -1;\n            tabElement.setAttribute('aria-selected', String(select));\n            tabElement.setAttribute('aria-expanded', String(select));\n            __classPrivateFieldGet(this, _tabpanelElements)[index].setAttribute('aria-hidden', String(!select));\n        });\n        __classPrivateFieldSet(this, _selectedTabNo, tabNo);\n    }\n    /**\n     * ユーザー操作によりタブを切り替える\n     *\n     * @param {number} tabNo - 切り替えるタブ番号\n     */\n    _changeTab(tabNo) {\n        this._selectTab(tabNo);\n        __classPrivateFieldGet(this, _tabElements)[tabNo].focus();\n        /* 現在選択中のタブ情報をストレージに保管する */\n        if (__classPrivateFieldGet(this, _mySessionStorage) !== null && this.storageKey !== null) {\n            __classPrivateFieldGet(this, _mySessionStorage).setItem(this.storageKey, __classPrivateFieldGet(this, _tabpanelElements)[tabNo].id);\n        }\n    }\n}\n_mySessionStorage = new WeakMap(), _tablistElement = new WeakMap(), _tabElements = new WeakMap(), _tabpanelElements = new WeakMap(), _selectedTabNo = new WeakMap(), _tabClickEventListener = new WeakMap(), _tabKeydownEventListener = new WeakMap(), _tabpanelKeydownEventListener = new WeakMap();\n"]}